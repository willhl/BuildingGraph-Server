

#######
##
##     -- Extended Electrical Types --
##     
##     Provides more detailed types and fields for mechanical systems.
##
#######


### Augmented Types ###

type Space {
    FanCoilUnits: [FanCoilUnit] @relation(name:"IS_IN_SPACE",direction:IN)
    Space_Sensible_Cooling_Load_per_Terminal: String
    Space_Total_Cooling_Load_per_Terminal: String
    Space_Heating_Load_per_Terminal: String
}

type Circuit {
    FanCoilUnits: [FanCoilUnit] @relation(name:"ELECTRICAL_FLOW_TO",direction:OUT)
}


type DuctSystem {
  Name: String
  Id: ID!
  ElementType: ElementType @relation(name:"IS_OF",direction:OUT)
  ModelElements: [ModelElement] @relation(name:"REALIZED_BY",direction:OUT)
  AllElements: [AbstractElement] @relation(name:"ABSTRACTED_BY",direction:OUT)
}


### Types ###

type Query {

    getFanCoilUnits: [FanCoilUnit] @cypher(statement: "match (e:ElementType {ClassificationCode:'[Uniclass 2015 - Product] Pr_70_65_03_29 : Fan coil units'})<-[:IS_OF]-(me:Equipment) return me")
    getSupplyAirSystems: [SupplyAirSystem] @cypher(statement: "match (me:System {Type:'Ss_65_40_33_51 - Supply'}) return me")
}


"""
Supply Systems
[Uniclass 2015 - System]:Ss_65_40_33_51
"""
type SupplyAirSystem implements AbstractElement {
    Id: ID!
    Name: String
    ElementType: ElementType @relation(name:"IS_OF",direction:OUT)
    ModelElements: [ModelElement] @relation(name:"REALIZED_BY",direction:OUT)

    Flow (units: VolumeFlowRateUnits = l_per_s): Float
    Static_Pressure (units: PressureUnits = kPa): Float
}


"""
MVHR
[Uniclass 2015 - Product]: Pr_60_65_03_mvhr
"""
type NVHRUnit implements AbstractElement & ElectricalLoadElement & MechanicalEquipment {

    Id: ID!
    Name: String

    ElementType: ElementType @relation(name:"IS_OF",direction:OUT)
    ModelElements: [ModelElement] @relation(name:"REALIZED_BY",direction:OUT)
    Space: Space @relation(name:"IS_IN_SPACE",direction:OUT)

    ElectricalLoad: ElecticalLoad @relation(name:"ELECTRICAL_FLOW",direction:IN)

    HeatingCoilFlow: [AbstractElement] @relation(name:"HEATING_FLOW",direction:IN)
    HeatingCoilReturn: [AbstractElement] @relation(name:"HEATING_FLOW",direction:OUT)

    FreshAir: FreshAirConnector @relation(name:"AIR_FLOW",direction:IN)
    ExhaustAir: ExhaustAirConnector @relation(name:"AIR_FLOW",direction:OUT)

    SupplyAir: SupplyAirConnector @relation(name:"AIR_FLOW",direction:OUT)
    ExtractAir: ExtractAirConnector @relation(name:"AIR_FLOW",direction:IN)

}


type FreshAirConnector implements Connector & AirConnector {
    Id: ID!
    Name: String

    Flow: (units: VolumeFlowRateUnits = l_per_s): LitersPerSecond
    PressureDrop: (units: PressureUnits = kPa): KiloPascals
    
    AirIn: AbstractElement  @relation(name:"AIR_FLOW",direction:IN)
    AirOut: AbstractElement  @relation(name:"AIR_FLOW",direction:OUT)

    System: System @relation(name:"ABSTRACTED_BY",direction:OUT)

}

type ExhaustAirConnector implements Connector & AirConnector {
    Id: ID!
    Name: String

    Flow: (units: VolumeFlowRateUnits = l_per_s): LitersPerSecond
    PressureDrop: (units: PressureUnits = kPa): KiloPascals
    
    AirIn: AbstractElement  @relation(name:"AIR_FLOW",direction:IN)
    AirOut: AbstractElement  @relation(name:"AIR_FLOW",direction:OUT)

    System: System @relation(name:"ABSTRACTED_BY",direction:OUT)

}

type SupplyAirConnector implements Connector & AirConnector {
    Id: ID!
    Name: String

    Flow: (units: VolumeFlowRateUnits = l_per_s): LitersPerSecond
    PressureDrop: (units: PressureUnits = kPa): KiloPascals
    
    AirIn: AbstractElement  @relation(name:"AIR_FLOW",direction:IN)
    AirOut: AbstractElement  @relation(name:"AIR_FLOW",direction:OUT)

    System: System @relation(name:"ABSTRACTED_BY",direction:OUT)

}

type ExtractAirConnector implements Connector & AirConnector {
    Id: ID!
    Name: String

    Flow: (units: VolumeFlowRateUnits = l_per_s): LitersPerSecond
    PressureDrop: (units: PressureUnits = kPa): KiloPascals

    AirIn: AbstractElement  @relation(name:"AIR_FLOW",direction:IN)
    AirOut: AbstractElement  @relation(name:"AIR_FLOW",direction:OUT)

    System: System @relation(name:"ABSTRACTED_BY",direction:OUT)

}


interface  Connector {
    Id: ID!
    Name: String

    System: System
}


interface  AirConnector {
    Id: ID!
    Name: String

    Flow: (units: VolumeFlowRateUnits = l_per_s): LitersPerSecond
    PressureDrop: (units: PressureUnits = kPa): KiloPascals
    
    AirIn: AbstractElement  @relation(name:"AIR_FLOW",direction:IN)
    AirOut: AbstractElement  @relation(name:"AIR_FLOW",direction:OUT)

    System: System @relation(name:"ABSTRACTED_BY",direction:OUT)

}




"""
Fan Coil Unit
[Uniclass 2015 - Product]:Pr_70_65_03_29
"""
type FanCoilUnit implements AbstractElement & ElectricalLoadElement {
    Id: ID!
    Name: String
    
    Circuit: Circuit @relation(name:"ELECTRICAL_FLOW_TO",direction:IN)

    ElementType: ElementType @relation(name:"IS_OF",direction:OUT)
    ModelElements: [ModelElement] @relation(name:"REALIZED_BY",direction:OUT)
    Space: Space @relation(name:"IS_IN_SPACE",direction:OUT)

    Apparent_Load (units: ApparentPowerUnits = VA ): VoltAmperes
    Diversity: Float
    ConnectedTo: ElectricalLoadElement @relation(name:"ELECTRICAL_FLOW_TO",direction:IN)
    Level: Level @relation(name:"IS_ON",direction:OUT)

    ExtendedType: FanCoilUnitType  @cypher(statement: "MATCH (this)-[:IS_OF]->(et:ElementType) RETURN et")

    HydronicFlowsIn: [AbstractElement] @relation(name:"HYDRONIC_FLOW_TO",direction:IN)
    HydronicFlowsOut: [AbstractElement] @relation(name:"HYDRONIC_FLOW_TO",direction:OUT)

    AirFlowsIn: [AbstractElement] @relation(name:"AIR_FLOW_TO",direction:IN)
    AirFlowsOut: [AbstractElement] @relation(name:"AIR_FLOW_TO",direction:OUT)

    Comments: String
    Mark: String
    Air_Flow_Rate (units: VolumeFlowRateUnits = l_per_s): LitersPerSecond
    Air_Pressure_Drop (units: PressureUnits = kPa): KiloPascals
    Area (units: AreaUnits = m2): SquareMeters
    Casing_and_Inlet_Sound_Power_Level_in_dB_at_1000Hz: Float
    Casing_and_Inlet_Sound_Power_Level_in_dB_at_125Hz: Float
    Casing_and_Inlet_Sound_Power_Level_in_dB_at_2000Hz: Float
    Casing_and_Inlet_Sound_Power_Level_in_dB_at_250Hz: Float
    Casing_and_Inlet_Sound_Power_Level_in_dB_at_4000Hz: Float
    Casing_and_Inlet_Sound_Power_Level_in_dB_at_500Hz: Float
    Casing_and_Inlet_Sound_Power_Level_in_dB_at_63Hz: Float
    Casing_and_Inlet_Sound_Power_Level_in_dB_at_8000Hz: Float
    CHW_Coil_Volume (units: VolumeUnits = l): Liters
    CHW_Density: Float
    CHW_Flow_Pressure_Drop (units: PressureUnits = kPa): KiloPascals
    CHW_Flow_Rate (units: VolumeFlowRateUnits = l_per_s): LitersPerSecond
    CHW_Flow_Temperature (units: TemperatureUnits = C): DegreeCelsius
    CHW_Glycol_Percentage: Float
    CHW_Pipe_Connection_Size (units: LengthUnits = mm): MilliMeters
    CHW_Pressure_Drop (units: PressureUnits = kPa): KiloPascals
    CHW_Return_Pressure_Drop (units: PressureUnits = kPa): KiloPascals
    CHW_Return_Temperature (units: TemperatureUnits = C): DegreeCelsius
    CHW_Specific_Heat_Capacity: Float
    Condensate_Discharge_Units: Float
    Condensate_Pipe_Connection_Size (units: LengthUnits = mm): MilliMeters
    Cooling_Duty (units: PowerUnits =  W): Watts
    Critical_Path: Boolean
    Discharge_Sound_Power_Level_in_dB_at_1000Hz: Float
    Discharge_Sound_Power_Level_in_dB_at_125Hz: Float
    Discharge_Sound_Power_Level_in_dB_at_2000Hz: Float
    Discharge_Sound_Power_Level_in_dB_at_250Hz: Float
    Discharge_Sound_Power_Level_in_dB_at_4000Hz: Float
    Discharge_Sound_Power_Level_in_dB_at_500Hz: Float
    Discharge_Sound_Power_Level_in_dB_at_63Hz: Float
    Discharge_Sound_Power_Level_in_dB_at_8000Hz: Float
    Heating_Duty (units: PowerUnits =  W): Watts
    In_Duct_or_Radiated_Discharge_Sound_Power_Level: String
    Latent_Cooling_Duty (units: PowerUnits =  W): Watts
    LTHW_Coil_Volume (units: VolumeUnits = l): Liters
    LTHW_Density: Float
    LTHW_Flow_Pressure_Drop (units: PressureUnits = kPa): KiloPascals
    LTHW_Flow_Rate (units: VolumeFlowRateUnits = l_per_s): LitersPerSecond
    LTHW_Flow_Temperature (units: TemperatureUnits = C): DegreeCelsius
    LTHW_Pipe_Connection_Size (units: LengthUnits = mm): MilliMeters
    LTHW_Pressure_Drop (units: PressureUnits = kPa): KiloPascals
    LTHW_Return_Pressure_Drop (units: PressureUnits = kPa): KiloPascals
    LTHW_Return_Temperature (units: TemperatureUnits = C): DegreeCelsius
    LTHW_Specific_Heat_Capacity: Float
    Maximum_Pump_Speed_at_Capability_Duty_in_RPM: Float
    Noise_Rating_in_NR: Int
    Off_Coil_Air_Temperature_Delta_T (units: TemperatureUnits = C): DegreeCelsius
    Offset (units: LengthUnits = mm): MilliMeters
    Power (units: PowerUnits =  W): Watts
    Power_Factor: Float
    Sensible_Cooling_Duty (units: PowerUnits =  W): Watts
    Specific_Fan_Power_in_Watts_per_Litres_per_Second: Float
    Supply_Air_Cooling_Contribution (units: PowerUnits =  W): Watts
    Supply_Air_Flow_Rate (units: VolumeFlowRateUnits = l_per_s): LitersPerSecond
}

type FanCoilUnitType
{
    Name: String
    Description: String
    Attenuator: Boolean
    Attenuator_Length (units: LengthUnits = mm): MilliMeters
    Temperature_Sensor_Location: String
    Unit_Height (units: LengthUnits = mm): MilliMeters
    Unit_Width (units: LengthUnits = mm): MilliMeters
    Unit_Length (units: LengthUnits = ft): MilliMeters
    Operating_Weight (units: MassUnits=Kg): KiloGrams
    Fan_Speed_Mode: String

    FanCoilUnits: [FanCoilUnitType] @relation(name:"IS_OF",direction:IN)
}

type Terminal implements Connector & AirConnector {
    AirFlowsIn: [AbstractElement] @relation(name:"AIR_FLOW_TO",direction:IN)
    AirFlowsOut: [AbstractElement] @relation(name:"AIR_FLOW_TO",direction:OUT)
    AirFlowToSpace: Space @relation(name:"FLOWS_TO_SPACE",direction:IN)
    AirFlowFromSpace: Space @relation(name:"FLOWS_TO_SPACE",direction:OUT)

    Air_Flow_Rate (units: VolumeFlowRateUnits = l_per_s): LitersPerSecond
    Air_Velocity (units: SpeedUnits = m_per_s): MetersPerSecond
    Air_Pressure_Drop (units: PressureUnits = kPa): KiloPascals

    Active_Face_Length (units: LengthUnits = mm): MilliMeters
    Active_Face_Width (units: LengthUnits = mm): MilliMeters

    SupplyAirSystems: [SupplyAirSystem] @relation(name:"ABSTRACTED_BY",direction:IN)
}

type Space {



    FlowSummary: [AirSystemSummary] @cypher(statement:"MATCH (ti:Terminal)-[:FLOWS_TO_SPACE]->(this)-[:FLOWS_TO_SPACE]->(t:Terminal) return apoc.create.vNode(['ExtractSystemSummary'], {Id:'temp', Total_Air_FlowIn:sum(t.Air_Flow_Rate), Total_Air_FlowOut:sum(ti.Air_Flow_Rate)}) as SpaceFlowSummary")
}   


type Query {
    FlowSummaryQuery(spaceNumber: String): [AirSystemSummary] @cypher(statement:"MATCH (ti:Terminal)-[:FLOWS_TO_SPACE]->(s:Space {Number:$spaceNumber})-[:FLOWS_TO_SPACE]->(t:Terminal) return {Total_Air_FlowIn:sum(t.Air_Flow_Rate), Total_Air_FlowOut:sum(ti.Air_Flow_Rate)}")

}



type ExtractSystem {
    Id: ID!
    Name: String

}


interface SystemSummary {
    Id: ID!
    Name: String

    
}

"""
    Create summary types in graph for all summarys
"""
type AirSystemSummary implements  SystemSummary {
    Id: ID!
    Name: String


    Space_Total_Air_FlowIn (spaceId:ID!): Float  @cypher(statement:"MATCH (Space {Id:$spaceId})<-[:FLOWS_TO_SPACE]-(t:Terminal) RETURN sum(t.Air_Flow_Rate)")
    Space_Total_Air_FlowOut (spaceId:ID!): Float  @cypher(statement:"MATCH (Space {Id:$spaceId})-[:FLOWS_TO_SPACE]->(t:Terminal) RETURN sum(t.Air_Flow_Rate)")
    Space_Number_of_AirTerminals (spaceId:ID!): Int @cypher(statement:"MATCH (Space {Id:$spaceId})<-[:IS_IN_SPACE]-(t:Terminal) RETURN count(t)")

    Systems: [ExtractSystem] @cypher(statement:"MATCH (Space {Id:$spaceId})<-[:IS_IN_SPACE]-(t:Terminal) RETURN count(t)")
}

