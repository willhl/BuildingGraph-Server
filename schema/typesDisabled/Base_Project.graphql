
#######
##
##     -- Project Types --
##
##     Types which define projects and building (levels and zones) hierarchy
##
#######


### Types ###

type Project implements BaseElement {
  Name: String
  Id: ID!
  Buildings: [Building] @relation(name:"INCLUDES",direction:OUT)
  Sites: [Building] @relation(name:"INCLUDES",direction:OUT)
}

type Site implements BaseElement {
  Name: String
  Id: ID!
  Projects: [Project] @relation(name:"INCLUDES",direction:IN)
  Buildings: [Building] @relation(name:"INCLUDES",direction:OUT)
  Street: String
  City: String
  PostalCode: String
  CountryCode: Int
}

 
type Building implements BaseElement  {
  Name: String
  Id: ID!
  BuildingType: String
  Spaces: [Space] @relation(name:"IS_IN",direction:IN)
  Models: [Model] @relation(name:"IS_OF",direction:IN)
  Levels: [Level] @relation(name:"IS_IN",direction:IN)
  Projects: [Project] @relation(name:"INCLUDES",direction:IN)
}

type Level implements AbstractElement {
  Name: String
  Id: ID!
  Abbreviation: String
  Elevation (unit: LengthUnits = m): Meters
  ElementType: ElementType @relation(name:"IS_OF",direction:OUT)
  ModelElements: [ModelElement] @relation(name:"REALIZED_BY",direction:OUT)
  AbstractElements: [AbstractElement] @relation(name:"IS_ON",direction:IN)
  Spaces: [Space] @relation(name:"IS_ON",direction:IN)
  Building: Building @relation(name:"IS_IN",direction:OUT)
}

type Zone implements AbstractElement {
  Id: ID!
  Name: String! 
  AllElements: [AbstractElement] @relation(name:"IS_IN_SPACE",direction:IN)
  ElementType: ElementType @relation(name:"IS_OF",direction:OUT)
  ModelElements: [ModelElement] @relation(name:"REALIZED_BY",direction:OUT)
  Spaces: [Space] @relation(name:"IS_IN_ZONE",direction:IN)
}


### Augmented Types ###

type Space {
    BaseLevel: Level @relation(name:"IS_ON",direction:OUT)
    Zone: Zone @relation(name:"IS_IN_ZONE",direction:OUT)
}

### Mutations ###

type Mutation {
  Add_Project_INCLUDES_Building(fromId:ID! toId:ID!) : String @cypher(statement:"MATCH (frn:Project{Id: $fromId}),(ton:Building {Id: $toId}) MERGE (frn)-[r:INCLUDES]->(ton) with frn,ton OPTIONAL MATCH (frn)-[rs:INCLUDES]->(ton2) where Id(ton) <> Id(ton2) delete rs")   
  Remove_Project_INCLUDES_Building(fromId:ID! toId:ID!) : String @cypher(statement:"MATCH (frn:Project {Id: $fromId})-[r:INCLUDES]->(ton:Building {Id: $toId}) DELETE r")

  Add_Space_IS_IN_Building(fromId:ID! toId:ID! user:String) : String @cypher(statement:"MATCH (frn:Space {Id: $fromId}),(ton:Building {Id: $toId}) MERGE (frn)-[r:IS_IN]->(ton) with frn,ton OPTIONAL MATCH (frn)-[rs:IS_IN]->(ton2) where Id(ton) <> Id(ton2) delete rs")   
  Remove_Space_IS_IN_Building(fromId:ID! toId:ID!) : String @cypher(statement:"MATCH (frn:Space {Id: $fromId})-[r:IS_IN]->(ton:Building {Id: $toId}) DELETE r")

  Add_Space_IS_ON_Level(fromId:ID! toId:ID! user:String) : String @cypher(statement:"MATCH (frn:Space {Id: $fromId}),(ton:Level {Id: $toId}) MERGE (frn)-[r:IS_ON]->(ton) with frn,ton OPTIONAL MATCH (frn)-[rs:IS_IN]->(ton2) where Id(ton) <> Id(ton2) delete rs")   
  Remove_Space_IS_ON_Level(fromId:ID! toId:ID!) : String @cypher(statement:"MATCH (frn:Space {Id: $fromId})-[r:IS_ON]->(ton:Level {Id: $toId}) DELETE r")

  Add_Level_IS_IN_Building(fromId:ID! toId:ID! user:String) : String @cypher(statement:"MATCH (frn:Level {Id: $fromId}),(ton:Building {Id: $toId}) MERGE (frn)-[r:IS_IN]->(ton) with frn,ton OPTIONAL MATCH (frn)-[rs:IS_IN]->(ton2) where Id(ton) <> Id(ton2) delete rs")   
  Remove_Space_IS_IN_Building(fromId:ID! toId:ID!) : String @cypher(statement:"MATCH (frn:Level {Id: $fromId})-[r:IS_IN]->(ton:Building {Id: $toId}) DELETE r")

  Add_AbstractElement_IS_ON_Level(fromId:ID! toId:ID! user:String) : String @cypher(statement:"MATCH (frn:AbstractElement {Id: $fromId}),(ton:Level {Id: $toId}) MERGE (frn)-[r:IS_ON]->(ton) with frn,ton OPTIONAL MATCH (frn)-[rs:IS_IN]->(ton2) where Id(ton) <> Id(ton2) delete rs")   
  Remove_AbstractElement_IS_ON_Level(fromId:ID! toId:ID!) : String @cypher(statement:"MATCH (frn:AbstractElement {Id: $fromId})-[r:IS_ON]->(ton:Level {Id: $toId}) DELETE r")

  Add_Space_IS_IN_ZONE_Zone(fromId:ID! toId:ID!) : String @cypher(statement:"MATCH (frn:Space {Id: $fromId}),(ton:Space {Id: $toId}) MERGE (frn)-[r:IS_IN_ZONE]->(ton)")   
  Remove_Space_IS_IN_Zone_Zone(fromId:ID! toId:ID!) : String @cypher(statement:"MATCH (frn:Space {Id: $fromId})-[r:IS_IN_ZONE]->(ton {Id: $toId}) DELETE r")
}
