import { typeDefs } from './graphql-schema'
import { ApolloServer } from 'apollo-server-express'
import express from 'express'
import neo4j from 'neo4j-driver'
import { makeAugmentedSchema } from 'neo4j-graphql-js'
import dotenv from 'dotenv'
import { initializeDatabase } from './initialize'

import UnitFloatScalarType from "./units/UnitFloatScalarType"
import JsonScalarType from "./units/JsonScalarType"
import JStringScalarType from "./units/JStringScalarType"

// set environment variables from .env
dotenv.config()

//sometimes getting line breaks into env vars can be tricky... this helps:
//replaces literal \n with actual line breaks
if (process.env.JWT_SECRET)
{
  process.env.JWT_SECRET = process.env.JWT_SECRET.replace(/\\n/g, '\n');
}

const app = express()

/*
 * Create an executable GraphQL schema object from GraphQL type definitions
 * including autogenerated queries and mutations.
 * Optionally a config object can be included to specify which types to include
 * in generated queries and/or mutations. Read more in the docs:
 * https://grandstack.io/docs/neo4j-graphql-js-api.html#makeaugmentedschemaoptions-graphqlschema
 */

 //Resolvers for the Unit conversion feature
//This is not yet an exhaustive list yet as there're still many additional units to add
const resolvers = {
  UnitFloat : new UnitFloatScalarType("UnitFloat"),
  Meters: new UnitFloatScalarType("Meters", "m"),
  MilliMeters: new UnitFloatScalarType("MilliMeters", "mm"),
  SquareMeters : new UnitFloatScalarType("SquareMeters", "m2"),
  SquareMilliMeters : new UnitFloatScalarType("SquareMilliMeters", "mm2"),
  CubicMilliMeters : new UnitFloatScalarType("CubicMilliMeters", "mm3"),
  CubicMeters : new UnitFloatScalarType("CubicMeters", "m3"),
  Liters : new UnitFloatScalarType("Liters", "l"),
  Amperes : new UnitFloatScalarType("Amperes", "A"),
  Kiloamperes : new UnitFloatScalarType("Kiloamperes", "kA"),
  Milliamperes : new UnitFloatScalarType("Milliamperes", "mA"),
  Watts : new UnitFloatScalarType("Watts", "W"),
  VoltAmperes : new UnitFloatScalarType("VoltAmperes", "VA"),
  LitersPerSecond: new UnitFloatScalarType("LitersPerSecond", "l_per_s"),
  DegreeCelsius: new UnitFloatScalarType("DegreeCelsius", "C"),
  KiloPascals: new UnitFloatScalarType("KiloPascals", "kPa"),
  KiloGrams: new UnitFloatScalarType("KiloGrams", "kg"),
  MetersPerSecond : new UnitFloatScalarType("MetersPerSecond", "m_per_s"),
  JsonParam : new JsonScalarType("JsonParam"),
  JString : new JStringScalarType("JString")
};

const schema = makeAugmentedSchema({typeDefs, resolvers, config: {
  auth: {
    isAuthenticated: true,
    hasRole: true
  }}
});


/*
 * Create a Neo4j driver instance to connect to the database
 * using credentials specified as environment variables
 * with fallback to defaults
 */
const driver = neo4j.driver(
  process.env.NEO4J_URI || "bolt://localhost:7687",
  neo4j.auth.basic(
    process.env.NEO4J_USER || "neo4j",
    process.env.NEO4J_PASSWORD || "ne04j"
  ),
  {
    encrypted: process.env.NEO4J_ENCRYPTED ? 'ENCRYPTION_ON' : 'ENCRYPTION_OFF',
  }
);



/*
 * Perform any database initialization steps such as
 * creating constraints or ensuring indexes are online
 *
 */
const init = async (driver) => {
  await initializeDatabase(driver)
}

/*
 * We catch any errors that occur during initialization
 * to handle cases where we still want the API to start
 * regardless, such as running with a read only user.
 * In this case, ensure that any desired initialization steps
 * have occurred
 */

init(driver)

/*
 * Create a new ApolloServer instance, serving the GraphQL schema
 * created using makeAugmentedSchema above and injecting the Neo4j driver
 * instance into the context object so it is available in the
 * generated resolvers to connect to the database.
 */
const server = new ApolloServer({
   context: ({ req }) => {
    return {
      driver,
      req,
      headers:req.headers,
      neo4jDatabase: req.header["x-database"] || process.env.NEO4J_DATABASE 
    };
  },
  schema: schema,
  introspection: true,
  playground: false,
})

// Specify host, port and path for GraphQL endpoint
const port = process.env.GRAPHQL_SERVER_PORT || 4002
const path = process.env.GRAPHQL_SERVER_PATH || '/graphql'
const host = process.env.GRAPHQL_SERVER_HOST || 'localhost'

/*
 * Optionally, apply Express middleware for authentication, etc
 * This also also allows us to specify a path for the GraphQL endpoint
 */
server.applyMiddleware({ app, path })

app.listen({ host, port, path }, () => {
  console.log(`GraphQL server ready at http://${host}:${port}${path}`)
})
